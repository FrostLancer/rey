import json
from web3 import Web3
from web3.middleware import geth_poa_middleware

# Initialize Web3 connection (Infura URL for Mainnet or Rinkeby testnet)
infura_url = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"
web3 = Web3(Web3.HTTPProvider(infura_url))

# Add POA middleware if connecting to testnets like Rinkeby or Ganache
web3.middleware_stack.inject(geth_poa_middleware, layer=0)

# Define the contract ABI (ERC-20)
erc20_abi = json.loads('[YOUR_ERC20_ABI_HERE]')  # Insert the ABI of the ERC-20 token
token_address = "0xYourTokenContractAddress"  # Replace with the actual ERC-20 token contract address
token_contract = web3.eth.contract(address=token_address, abi=erc20_abi)

# Define your wallet's address and private key
sender_address = "0xYourSenderAddress"
private_key = "your_private_key"  # Never expose private key in production, use secure storage methods

# Recipient's address and amount to transfer (in the smallest unit, e.g., wei)
recipient_address = "0xRecipientAddress"
amount = 100 * 10**18  # 100 tokens, assuming the token has 18 decimal places

# Get the nonce (transaction count) for the sender address
nonce = web3.eth.getTransactionCount(sender_address)

# Prepare the transaction
transaction = token_contract.functions.transfer(
    recipient_address,
    amount
).buildTransaction({
    'chainId': 1,  # 1 for mainnet, 3 for Rinkeby, etc.
    'gas': 200000,  # Estimate the gas limit or use a fixed number
    'gasPrice': web3.toWei('20', 'gwei'),  # Gas price in gwei
    'nonce': nonce,
})

# Sign the transaction with the sender's private key
signed_transaction = web3.eth.account.signTransaction(transaction, private_key)

# Send the signed transaction
transaction_hash = web3.eth.sendRawTransaction(signed_transaction.rawTransaction)

# Print the transaction hash
print(f"Transaction sent with hash: {web3.toHex(transaction_hash)}")

# Optionally, wait for the transaction receipt
receipt = web3.eth.waitForTransactionReceipt(transaction_hash)
print(f"Transaction receipt: {receipt}")
